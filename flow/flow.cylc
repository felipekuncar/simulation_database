#!Jinja2
{% from "load_data" import load_json %}

[meta]
      title = NZ Validation Workflow
      description = """NZ Validation Workflow

      This workflow can be executed on any HPC cluster or local machine with cylc installed. To do this:

      1. Clone the repository or download the output archive to your machine in `~/cylc-src/simulation_database'.
      2. Install cylc: https://cylc.github.io/cylc-doc/stable/html/installation.html
      3. Update the platform and paths indicated below to change the location of the data files.
         - To define a platform for your cluster use: https://cylc.github.io/cylc-doc/stable/html/reference/config/writing-platform-configs.html.
         - To run on your own computer, set the platform to "localhost". No other configuration is required.
      4. Start the workflow: `cylc vip simulation_database`.
      5. Interact with the running workflow with `cylc tui`.
      6. Results will appear in `~/cylc-run/simulation_database/runN/share/<event>`, one for each event in `events.json`.

      Dependencies
      ------------
      - Cylc (https://cylc.github.io)
      - Apptainer (https://apptainer.org/)
      """

{% set events = load_json('events.json') %}

[task parameters]
      event = {{ events | join(', ') }}

[scheduling]
    [[graph]]
        R1 = """
        create_simulation_directories => generate_velocity_model<event> & generate_station_coordinates<event> & realisation_to_srf<event>
        generate_velocity_model<event> => create_e3d_par<event> => estimate<event>
        estimate<event>:small? => emod3d_small<event>
        estimate<event>:medium? => emod3d_medium<event>
        estimate<event>:large? => emod3d_large<event>
        emod3d_small<event> | emod3d_medium<event> | emod3d_large<event> => lf_to_xarray<event>
        lf_to_xarray<event> => bb_sim<event> => im_calc<event>
        generate_station_coordinates<event> => create_e3d_par<event>
        generate_station_coordinates<event> => hf_sim<event> => bb_sim<event>
        realisation_to_srf<event> => generate_stoch<event> => hf_sim<event>
        realisation_to_srf<event> => create_e3d_par<event>
        """
[runtime]
[[root]]

    platform = cascade
    pre-script = "spack load apptainer"
    [[[environment]]]
        EVENT = %(event)s
        NZCVM_PATH = "/uoc/project/uoc40001/nzcvm_data"
        EVENTS_DIR = "$CYLC_WORKFLOW_RUN_DIR/events"
        EVENT_SHARE = $CYLC_WORKFLOW_SHARE_DIR/%(event)s
        KO_MATRIX_PATH = /uoc/project/uoc40001/ko_matrices
        STATIONS_PATH = "$CYLC_WORKFLOW_RUN_DIR/stations"
        APPTAINER_BINDPATH = "$PWD:/out,${EVENT_SHARE}:/event,${KO_MATRIX_PATH}:/ko_matrices,${STATIONS_PATH}:/stations,${NZCVM_PATH}:/nzcvm"
        CONTAINER = $CYLC_WORKFLOW_RUN_DIR/runner.sif
        EMOD3D = /uoc/project/uoc40001/EMOD3D/tools/emod3d-mpi_v3.0.13
        DEFAULTS = 24.2.2.1

[[create_e3d_par<event>]]
    platform = localhost
    script = apptainer exec -c $CONTAINER create-e3d-par $EVENT_SHARE/realisation.json $EVENT_SHARE/realisation.srf $EVENT_SHARE/Velocity_Model $EVENT_SHARE/stations $EVENT_SHARE/LF
    [[[environment]]]
         APPTAINER_BINDPATH = $EVENT_SHARE

[[bb_sim<event>]]
    script = apptainer exec -c "$CONTAINER" bb-sim /event/realisation.json /stations/stations.vs30 /event/realisation.lf /event/realisation.hf /event/realisation.bb
    [[[directives]]]
         -l select=1:ncpus=64:mem=128gb
         -l walltime=01:00:00

[[generate_velocity_model<event>]]
    script = apptainer exec --env "NZCVM_DATA_ROOT=/nzcvm" -c "$CONTAINER" generate-velocity-model /event/realisation.json /event/Velocity_Model --use-nzcvm

    [[[directives]]]
         -l select=1:ncpus=64:mem=128gb
         -l walltime=06:00:00

[[hf_sim<event>]]
    script = apptainer exec -c "$CONTAINER" hf-sim /event/realisation.json /event/realisation.stoch /event/stations/stations.ll /event/realisation.hf

    [[[directives]]]
         -l select=1:ncpus=32:mem=64gb
         -l walltime=06:00:00


[[im_calc<event>]]
    script = apptainer exec -c "$CONTAINER" im-calc /event/realisation.json /event/realisation.bb /event/intensity_measures.h5 --num-processes 64 --psa-rotd-maximum-memory-allocation 40 --ko-directory /ko_matrices

    [[[directives]]]
         -l select=1:ncpus=64:mem=100gb
         -l walltime=01:00:00

[[realisation_to_srf<event>]]
    script = apptainer exec -c "$CONTAINER" realisation-to-srf /event/realisation.json /event/realisation.srf --genslip-path /EMOD3D/tools/genslip_v5.6.2

[[generate_stoch<event>]]
    script = apptainer exec -c "$CONTAINER" generate-stoch /event/realisation.json /event/realisation.srf /event/realisation.stoch

[[generate_station_coordinates<event>]]
    platform = localhost
    script = apptainer exec -c "$CONTAINER" generate-station-coordinates /event/realisation.json /stations/stations_input.ll /event/stations/

[[estimate<event>]]
    platform = localhost
    script = "estimate_job_size $EVENT_SHARE/LF/e3d.par"
    completion = succeeded and (small or medium or large)

    [[[outputs]]]
        small = 'small'
        medium = 'medium'
        large = 'large'

[[emod3d_small<event>]]
    pre-script = "spack load intel-oneapi-mpi"
    script = "mpirun $EMOD3D -args par=$EVENT_SHARE/LF/e3d.par"

    [[[directives]]]
         -l select=1:ncpus=384:mpiprocs=384:mem=384gb
         -l walltime=03:00:00


[[emod3d_medium<event>]]
    pre-script = "spack load intel-oneapi-mpi"
    script = "mpirun $EMOD3D -args par=$EVENT_SHARE/LF/e3d.par"

    [[[directives]]]
         -l select=2:ncpus=384:mpiprocs=384:mem=384gb
         -l walltime=06:00:00

[[emod3d_large<event>]]
    pre-script = "spack load intel-oneapi-mpi"
    script = "mpirun $EMOD3D -args par=$EVENT_SHARE/LF/e3d.par"

    [[[directives]]]
         -l select=4:ncpus=384:mpiprocs=384:mem=384gb
         -l walltime=06:00:00


[[lf_to_xarray<event>]]
    script = apptainer exec -c "$CONTAINER" lf-to-xarray /event/LF/OutBin /event/realisation.lf
    [[[directives]]]
         -l select=1:ncpus=64:mem=128gb
         -l walltime=1:00:00

[[create_simulation_directories]]
    platform = localhost
    pre-script = ""
    script = cp -r $EVENTS_DIR/. $CYLC_WORKFLOW_SHARE_DIR
